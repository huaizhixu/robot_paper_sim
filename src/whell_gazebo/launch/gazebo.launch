<?xml version="1.0" ?>
<launch>

    <!-- 添加参数是否启动障碍物 -->
    <arg name="obstacle" default="true"/>


    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="true"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find whell_gazebo)/worlds/rrbot.world"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <!-- <param name="robot_description" command="cat '$(find whell_describe)/urdf/whell_describe.urdf'" /> -->
<param name="robot_description" command="xacro --inorder '$(find whell_describe)/urdf/whell_describe.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                                args="-urdf -z 0.2 -model whell_describe -param robot_description"/>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot 4.71 1.57-->
    <!-- 斜面楼梯的位置 -x -2.1 -y 5 -z 0.13 -R 0 -P 0 -Y 1.57 -->
    <!-- 高台位置  -x 2.1 -y 5 -z 0.13 -R 0 -P 0 -Y 4.71-->


<!-- 障碍物 -->
 <group if="$(arg obstacle)">
 <!-- 小斜坡1obstacle -->
<param name="obstacle" command="xacro --inorder '$(find whell_describe)/urdf/obstacle.xacro'" />
<node name="urdf_spawner1" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                                args="-urdf -x -2.1 -y 5 -z 0.13 -R 0 -P 0 -Y 1.57
                                -model whell_describe1 -param obstacle"/>
<!-- 平台 -->
<param name="hightower" command="xacro --inorder '$(find whell_describe)/urdf/hightower.urdf'" />

<node name="urdf_spawner_hightower" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                                args="-urdf -x 3 -y 0 -z 0 -R 0 -P 0 -Y 0
                                -model hightower -param hightower"/>

<!-- 斜坡theslope -->
<param name="theslope" command="xacro --inorder '$(find whell_describe)/urdf/theslope.urdf'" />

<node name="urdf_spawner_theslope" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                                args="-urdf -x -1.3 -y 2.3 -z 0.05 -R 0 -P 0 -Y 0
                                -model theslope -param theslope"/>

<!-- 高低路面surfacepath.urdf  -->

<param name="surfacepath" command="xacro --inorder '$(find whell_describe)/urdf/surfacepath.urdf'" />

<node name="urdf_spawner_surfacepath" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                                args="-urdf -x 3 -y 3 -z 0.0 -R 0 -P 0 -Y 1.57
                                -model surfacepath -param surfacepath"/>
</group>

  <!-- Load joint controller configurations from YAML file to parameter server -->

  <rosparam file="$(find whell_control)/config/robot_control.yaml" command="load"/>


 <!-- load the controllers -->
<!-- leg1423_Effort_controller
    leg1_joint_controller
    leg2_joint_controller
    leg3_joint_controller
    leg4_joint_controller
                                        -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/myrobot" args="joint_state_controller
                                        wheel34_Effort_controller
                                        left_wheel_controller
                                        right_wheel_controller
                                        leg1423_Effort_controller
                                        "/>

<!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
	respawn="false" output="screen">
    <remap from="/joint_states" to="/myrobot/joint_states" />
  </node>

  <!-- <node name="odom_to_tf" pkg="message_to_tf" type="message_to_tf"> </node> -->

  <!-- <node name="rviz" pkg="rviz" type="rviz" respawn="false" output="screen"
        args="-d $(find whell_gazebo)/launch/xacro.rviz" /> -->


</launch>
